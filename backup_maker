#!/bin/bash

# Cabeçalho
# ----------------------------------------------------------------------------
# Faz backup usando o comando rsync do unix. 
# Configurações são feitas no arquivo de configuração: backup_maker.config
#
# Uso: backup_maker.sh 
# Ex.: ./backup_maker.sh
#                                                                                                                               
# Autor: Frank <frankcbjunior (a) gmail com>
# Desde: 20-8-2013
# Versão: 1
# ----------------------------------------------------------------------------

# Variáveis
# ----------------------------------------------------------------------------
# TODO: melhorar esse acesso aos arquivos de parser, e de configuração
CONFIG="backup_maker.config" 		# arquivo de configuração
PARSER_FILE="parser"				# arquivo de parser   
              
ORIGEM="$1"
DESTINO="$2"

# cores
cor_amarelo="\033[33m"
cor_branco="\033[37m"
cor_vermelho="\033[31m"
fecha_cor="\033[m"

# Configurações padrões
RSYNC_PARAMS="ax"					# parametros padrões e obrigatórios para o rsync
CONF_VERBOSE="0"					# config: Verbose
CONF_PROGRESSO="0"					# config: Progresso
CONF_DELETE="0"						# config: Delete
CONF_CHECKSUM="0"					# config: Checksum

# Variaveis auxiliares
CHAVES=""							# pega todas as chaves do arquivo de configuração

# funções
# ----------------------------------------------------------------------------

function validacoes(){

	# verificando se o arquivo de configuração existe
	# TODO: criar um arquivo de configuração padrão, caso não exista
	if [ ! -e "$CONFIG" ];then
		print_error ""$CONFIG" não existe"
		exit 1
	fi

	# garantindo que o diretorio de origem eh diferente do diretorio de destino
	if [ "$ORIGEM" = $DESTINO ];then
		print_error "diretorio de origem deve ser diferente do diretorio de destino"
		exit 1
	fi

	# verificando se a origem existe
	if [ ! -e "$ORIGEM" ];then
		print_error ""$ORIGEM" não existe"
		exit 1
	fi

	# verificando se o destino existe
	if [ ! -e "$DESTINO" ];then
		print_error ""$DESTINO" não existe"
		exit 1
	fi

	# verificando se o destino é um diretorio
	if [ ! -d "$DESTINO" ];then
		print_error ""$DESTINO" não é um diretorio"
		exit 1
	fi
}

# imprime msg amarelo
function print_info(){
	echo -e "${cor_amarelo}"$1"${fecha_cor}"
}

# imprime msg verde
function print_success(){
	echo -e "${cor_verde}"$1"${fecha_cor}"
}

# imprime msg vermelho 
function print_erro(){
	echo -e "${cor_vermelho}$1${fecha_cor}"
}

# funcão para pegar o valor da chave procurada
function retorna_valor(){

	chaves=$1
	chave=$2
	valor=""

	# filtrando a saída pela chave que foi passada por parametro
	valor=$(echo -e "$chaves" | grep -i "$chave")

	# validação, para chave duplicada
	if [ $(echo -e "$valor" | wc -l) -gt 1 ]; then
		print_error "Erro: chave $PARAM duplicada, no arquivo de configuração"
		exit 1
	fi

	# pegando a somente o valor da chave, e imprimindo na saída padrão
	valor=$(echo "$valor" | cut -d "=" -f2 | sed 's/\"//g' | tr A-Z a-z)

	echo "$valor"
}

# função para validar a chave, e setar o valor correto dela
function valida_chaves(){

	chave="$1"

	if [ "$chave" = 'on' ] || [ "$chave" = "1" ];then
		chave="$2"
	else
		chave=""
	fi

	echo "$chave"
}

# Main
# ----------------------------------------------------------------------------

validacoes

# Carregando a configuração do arquivo externo
CHAVES="$(./"$PARSER_FILE" "$CONFIG")"

# consultando as chaves
CONF_VERBOSE=$(retorna_valor "$CHAVES" "verbose")
CONF_PROGRESSO=$(retorna_valor "$CHAVES" "progresso")
CONF_CHECKSUM=$(retorna_valor "$CHAVES" "checksum")
CONF_DELETE=$(retorna_valor "$CHAVES" "delete")

# validando as chaves
CONF_VERBOSE=$(valida_chaves "$CONF_VERBOSE" "vh")
CONF_PROGRESSO=$(valida_chaves "$CONF_PROGRESSO" "P")
CONF_CHECKSUM=$(valida_chaves "$CONF_DELETE" "c")
CONF_DELETE=$(valida_chaves "$CONF_DELETE" "--delete")

# agrupando todos os parametros do rsync
RSYNC_PARAMS="$RSYNC_PARAMS$CONF_VERBOSE$CONF_PROGRESSO$CONF_CHECKSUM $CONF_DELETE"
#print_success "executando o backup"
print_info "executando o backup"

# lendo o arquivo que contem varios diretorio de origem.
# o nome passado tem que ser igual a 'origens.txt'.
# Tem que ser um arquivo, e tem que ser legivel
if [ "$ORIGEM" = 'origens.txt' -a -f "$ORIGEM" -a -r "$ORIGEM" ];then
	ORIGENS="$(./"$PARSER_FILE" origens.txt)"
	for ((i=1;i<=$(echo -e "$ORIGENS" | wc -l);i++));do
		LINHA=$(echo -e "$ORIGENS" | sed -n "$i"p)
		if [ ! -e "$LINHA" ];then
			print_error ""$LINHA" nao existe"
			exit 1
		elif [ ! -d "$LINHA" ];then
			print_error ""$LINHA" nao é um diretorio"
			exit 1
		elif [ ! -r "$LINHA" ];then
			print_error "não é possível ler "$LINHA""
			exit 1
		else
			print_success "sincronizando com "$LINHA""
			# FIXME dessa forma, ele irá copiar as pasta que estão dentro do 'origens.txt', mas se no destino
			# conter algum arquivo do lado de fora dessas pastas, ele não irá ser excluído com o '--delete' do rsync.
			# Caso o campo DELETE do 'backup_maker.config' estar ativo, deletar esses arquivos soltos na mão
			rsync -$RSYNC_PARAMS "$LINHA" "$DESTINO"
		fi
	done
	exit 0
	
# caso contrário, é um diretorio de origem unico
else
	rsync -$RSYNC_PARAMS "$ORIGEM" "$DESTINO"
	exit 0
fi
